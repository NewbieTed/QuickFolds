<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to annotated lines in an origami model.

    Purpose:
    - This mapper provides SQL operations for managing annotated lines, including retrieval, insertion,
      and soft deletion by setting the `deleted_step_id` field.
    - It maps database columns to Java object properties using the `AnnotatedLine` entity.

    Key SQL Operations:
    - `getIdsByIdsInFace`: Retrieves IDs of annotated lines for a given face.
    - `getDependentIds`: Retrieves IDs of lines dependent on specific points.
    - `addByObj`: Inserts a new annotated line into the database.
    - `deleteByIdsInFace`: Marks multiple annotated lines as deleted.

    Dependencies:
    - `AnnotatedLine`: The Java entity representing an annotated line.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.AnnotateLineMapper">

    <!--
        Result Map for AnnotatedLine entity.

        Purpose:
        - Maps database columns to the fields of the `AnnotatedLine` Java entity.
        - Ensures MyBatis correctly binds query results to Java objects.

        Fields:
        - `id`: Primary key of the annotated line.
        - `step_id`: The step associated with the annotation.
        - `face_id`: The face where the line is drawn.
        - `point_1_id` / `point_2_id`: Start and end points of the line.
        - `id_in_face`: Line identifier within the face.
        - `deleted_step_id`: Step marking the deletion of the line.
        - `created_by` / `updated_by`: Audit fields.
        - `created_at` / `updated_at`: Timestamps for creation and modification.
    -->
    <resultMap id="AnnotatedLineResultMap" type="com.quickfolds.backend.geometry.model.database.AnnotatedLine">
        <id property="id" column="id" />
        <result property="stepId" column="step_id" />
        <result property="faceId" column="face_id" />
        <result property="point1Id" column="point_1_id" />
        <result property="point2Id" column="point_2_id" />
        <result property="idInFace" column="id_in_face" />
        <result property="deletedStepId" column="deleted_step_id" />
        <result property="createdBy" column="created_by" />
        <result property="updatedBy" column="updated_by" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <!--
        Retrieves IDs of annotated lines for a specific face.

        Purpose:
        - This query returns the IDs of annotated lines within a given face, filtered
          by the `face_id` and the list of `id_in_face` values provided.

        Parameters:
        - `faceId`: The ID of the origami face containing the annotated lines.
        - `idsInFace`: A list of line identifiers within the face.

        Result:
        - List of `id` values for the matching annotated lines.
    -->
    <select id="getIdsByIdsInFace" resultType="java.lang.Long">
        SELECT id
        FROM annotated_line
        WHERE face_id = #{faceId}
        AND id_in_face IN (
        <foreach collection="idsInFace" item="idInFace" separator=",">
            #{idInFace}
        </foreach>
        )
    </select>

    <!--
        Retrieves IDs of annotated lines that depend on specific points.

        Purpose:
        - This query finds annotated lines where either `point_1_id` or `point_2_id`
          matches any of the provided point IDs.
        - Only active (non-deleted) lines are considered (`deleted_step_id IS NULL`).

        Parameters:
        - `faceId`: The ID of the origami face containing the lines.
        - `pointIds`: A list of point IDs to check for line dependencies.

        Result:
        - List of `id` values for dependent annotated lines.
    -->
    <select id="getDependentIds" resultType="java.lang.Long">
        SELECT id
        FROM annotated_line
        WHERE face_id = #{faceId}
        AND deleted_step_id IS NULL
        AND (
        point_1_id IN (
        <foreach collection="pointIds" item="pointId" separator=",">
            #{pointId}
        </foreach>
        )
        OR
        point_2_id IN (
        <foreach collection="pointIds" item="pointId" separator=",">
            #{pointId}
        </foreach>
        )
        )
    </select>

    <!--
        Inserts a new annotated line into the database.

        Purpose:
        - This query adds a new annotated line record associated with a specific face
          and step in the origami workflow. Optional fields such as `created_by` and
          timestamps are conditionally included if they are not null.

        Parameters:
        - `annotatedLine`: The Java object representing the annotated line.

        Fields Inserted:
        - `step_id`, `face_id`, `point_1_id`, `point_2_id`, `id_in_face`, `deleted_step_id`
        - Optional: `created_by`, `updated_by`, `created_at`, `updated_at`
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.AnnotatedLine">
        INSERT INTO annotated_line (
        step_id,
        face_id,
        point_1_id,
        point_2_id,
        id_in_face,
        deleted_step_id
        <if test="annotatedLine.createdBy != null">, created_by</if>
        <if test="annotatedLine.updatedBy != null">, updated_by</if>
        <if test="annotatedLine.createdAt != null">, created_at</if>
        <if test="annotatedLine.updatedAt != null">, updated_at</if>
        ) VALUES (
        #{annotatedLine.stepId},
        #{annotatedLine.faceId},
        #{annotatedLine.point1Id},
        #{annotatedLine.point2Id},
        #{annotatedLine.idInFace},
        #{annotatedLine.deletedStepId}
        <if test="annotatedLine.createdBy != null">, #{annotatedLine.createdBy}</if>
        <if test="annotatedLine.updatedBy != null">, #{annotatedLine.updatedBy}</if>
        <if test="annotatedLine.createdAt != null">, #{annotatedLine.createdAt}</if>
        <if test="annotatedLine.updatedAt != null">, #{annotatedLine.updatedAt}</if>
        )
    </insert>

    <!--
        Marks multiple annotated lines as deleted.

        Purpose:
        - This query performs a soft delete by setting `deleted_step_id` for annotated
          lines matching the given face ID and line identifiers (`id_in_face`).
        - Only lines that are not already marked as deleted (`deleted_step_id IS NULL`)
          are affected.

        Parameters:
        - `faceId`: The ID of the origami face containing the lines.
        - `deletedStepId`: The step ID representing the deletion.
        - `idsInFace`: List of line IDs within the face.

        Effect:
        - Updates `deleted_step_id` for matching lines.
    -->
    <update id="deleteByIdsInFace">
        UPDATE annotated_line
        SET deleted_step_id = #{deletedStepId}
        WHERE face_id = #{faceId}
        AND deleted_step_id IS NULL
        AND id_in_face IN (
        <foreach collection="idsInFace" item="idInFace" separator=",">
            #{idInFace}
        </foreach>
        )
    </update>

</mapper>