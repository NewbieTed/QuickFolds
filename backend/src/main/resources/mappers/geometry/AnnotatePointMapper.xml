<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to annotated points in an origami model.

    Purpose:
    - This mapper provides SQL operations for managing annotated points, including insertion.
    - It conditionally includes non-null fields for flexible data insertion.

    Key SQL Operations:
    - `addByObj`: Inserts a new annotated point into the database.

    Dependencies:
    - `AnnotatedPoint`: The Java entity representing an annotated point.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.AnnotatePointMapper">

    <!--
       Result Map for mapping database columns to the `AnnotatePoint` DTO fields.

       Purpose:
       - Ensures MyBatis correctly maps query results to Java objects.
       - Maps each database column to the corresponding Java property.

       Mapped Fields:
       - `face_id`: Maps to `faceId` in the DTO.
       - `id_in_origami`: Maps to `faceIdInOrigami` in the DTO.
       - `id_in_face`: Maps to `idInFace` in the DTO.
       - `x`: Maps to the annotated points x coordinate.
       - `y`: Maps to the annotated points y coordinate.
       - `on_edge_id`: Maps to `edgeId` in the DTO.
       - `edge_type_name`: Maps to `edgeType` in the DTO.
   -->
    <resultMap id="AnnotatePointMap" type="com.quickfolds.backend.geometry.model.dto.request.AnnotatePointRequest">
        <result property="faceId" column="face_id"/>
        <result property="faceIdInOrigami" column="f.id_in_origami"/>
        <result property="idInFace" column="id_in_face"/>
        <result property="x" column="x"/>
        <result property="y" column="y"/>
        <result property="edgeId" column="on_edge_id"/>
        <result property="edgeType" column="edge_type_name"/>
    </resultMap>

    <!--
        Result Map for mapping database columns to the `DeletedIdInFace` DTO fields.

        Purpose:
        - Ensures MyBatis correctly maps query results to Java objects.
        - Maps each database column to the corresponding Java property.

        Mapped Fields:
        - `id_in_origami`: Maps to `faceIdInOrigami` in the DTO.
        - `id_in_face`: Maps to `idInFace` in the DTO.
    -->
    <resultMap id="DeletedIdInFaceMap" type="com.quickfolds.backend.geometry.model.dto.DeletedIdInFace">
        <result property="faceIdInOrigami" column="f.id_in_origami"/>
        <result property="idInFace" column="o.id_in_face"/>
    </resultMap>

    <!--
        Inserts a new annotated point into the database.

        Purpose:
        - Adds an annotated point associated with a specific origami face and edge.
        - Uses conditional checks to include non-null fields (e.g., created_by, updated_by).

        Parameters:
        - `annotatedPoint`: The Java object representing the annotated point.

        Fields Inserted:
        - `point_id`: The primary key referencing the origami point.
        - `on_edge_id`: The edge ID associated with the annotated point.
        - Optional: `created_by`, `updated_by`, `created_at`, `updated_at`.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.AnnotatedPoint">
        INSERT INTO annotated_point (
        point_id,
        on_edge_id
        <if test="annotatedPoint.createdBy != null">, created_by</if>
        <if test="annotatedPoint.updatedBy != null">, updated_by</if>
        <if test="annotatedPoint.createdAt != null">, created_at</if>
        <if test="annotatedPoint.updatedAt != null">, updated_at</if>
        )
        VALUES (
        #{annotatedPoint.pointId},
        #{annotatedPoint.onEdgeId}
        <if test="annotatedPoint.createdBy != null">, #{annotatedPoint.createdBy}</if>
        <if test="annotatedPoint.updatedBy != null">, #{annotatedPoint.updatedBy}</if>
        <if test="annotatedPoint.createdAt != null">, #{annotatedPoint.createdAt}</if>
        <if test="annotatedPoint.updatedAt != null">, #{annotatedPoint.updatedAt}</if>
        );
    </insert>

    <!--
        Retrieves a list of annotated points created in a specific step

        Purpose:
        - Fetches all annotated points created in a specific step.

        Parameters:
        - `stepId`: The ID of the step being queried.

        Result:
        - List of `AnnotatePoint` objects containing the point ID in face, coordinates,
            face ID in origami of the face the point is in, and type of edge and edge id if on an edge.
    -->
    <select id="getAnnotatedPointsByStepIdForward" resultMap="AnnotatePointMap">
        SELECT o.id_in_face, o.x_pos AS x, o.y_pos AS y, o.face_id, f.id_in_origami, a.on_edge_id, e.edge_type_name
        FROM origami_point o
        INNER JOIN face f ON o.face_id = f.id
        INNER JOIN annotated_point a ON o.id = a.point_id
        LEFT JOIN edge ON a.on_edge_id = edge.id
        LEFT JOIN edge_type e ON edge.edge_type_id = e.id
        WHERE o.step_id = #{stepId}
        ORDER BY f.id_in_origami ASC
    </select>

    <!--
        Retrieves a list of annotated points deleted in a specific step

        Purpose:
        - Fetches all annotated points deleted in a specific step.

        Parameters:
        - `stepId`: The ID of the step being queried.

        Result:
        - List of `AnnotatePoint` objects containing the point ID in face, coordinates,
            face ID in origami of the face the point is in, and type of edge and edge id if on an edge.
    -->
    <select id="getAnnotatedPointsByStepIdBackward" resultMap="AnnotatePointMap">
        SELECT o.id_in_face, o.x_pos AS x, o.y_pos AS y, o.face_id, f.id_in_origami, a.on_edge_id, e.edge_type_name
        FROM origami_point o
                 INNER JOIN face f ON o.face_id = f.id
                 INNER JOIN annotated_point a ON o.id = a.point_id
                 LEFT JOIN edge ON a.on_edge_id = edge.id
                 LEFT JOIN edge_type e ON edge.edge_type_id = e.id
        WHERE o.deleted_step_id = #{stepId}
        ORDER BY f.id_in_origami ASC
    </select>

    <!--
        Retrieves a list of annotated points deleted in a specific step

        Purpose:
        - Fetches the IDs of all annotated points deleted in a specific step.

        Parameters:
        - `stepId`: The ID of the step being queried.

        Result:
        - List of `DeletedIdInFace` objects containing the ID in the face of the deleted point
            and face ID in origami of the face the point is in.
    -->
    <select id="getDeleteAnnotatedPointsByStepIdForward" resultMap="DeletedIdInFaceMap">
        SELECT o.id_in_face, f.id_in_origami
        FROM origami_point o
        INNER JOIN annotated_point a ON o.id = a.point_id
        INNER JOIN face f ON o.face_id = f.id
        WHERE o.deleted_step_id = #{stepId}
        ORDER BY f.id_in_origami ASC
    </select>

    <!--
        Retrieves a list of annotated points created in a specific step.

        Purpose:
        - Fetches the IDs of all annotated points created in a specific step.

        Parameters:
        - `stepId`: The ID of the step being queried.

        Result:
        - List of `DeletedIdInFace` objects containing the ID in the face of the created point
            and face ID in origami of the face the point is in.
    -->
    <select id="getDeleteAnnotatedPointsByStepIdBackward" resultMap="DeletedIdInFaceMap">
        SELECT o.id_in_face, f.id_in_origami
        FROM origami_point o
        INNER JOIN annotated_point a ON o.id = a.point_id
        INNER JOIN face f ON o.face_id = f.id
        WHERE o.step_id = #{stepId}
        ORDER BY f.id_in_origami ASC
    </select>

</mapper>