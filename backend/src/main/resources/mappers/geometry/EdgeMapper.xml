<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to edges in an origami model.

    - Defines SQL mappings for retrieving and inserting edges.
    - Supports querying the most recent edge and finding edges within faces.

    SQL Operations:
    - `getMostRecentId`: Retrieves the most recently inserted edge for a step.
    - `getIdByIdInFace`: Finds an edge based on its position within a face.
    - `addByObj`: Inserts a new edge into the database.

    Dependencies:
    - `Edge`: The Java entity representing an edge in the origami model.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.EdgeMapper">
    <!--
    Retrieves the database ID of the most recently inserted edge for a given step.

    - Sorts edges by `id` in descending order.
    - Uses `LIMIT 1` to return only the most recent edge.
    -->
    <select id="getMostRecentId" resultType="java.lang.Long">
        SELECT id FROM edge
        WHERE
            step_id = #{stepId}
        ORDER BY id DESC
        LIMIT 1
    </select>

    <!--
        Retrieves the database ID of an edge using its position within a face.

        - Searches for edges in the `fold_edge` and `side_edge` tables.
        - Uses `UNION ALL` to combine results from multiple tables.
        - Ensures only one matching edge is returned with `LIMIT 1`.
    -->
    <select id="getIdByIdInFace" resultType="java.lang.Long">
        (SELECT edge_id FROM fold_edge
        WHERE
            face_1_id = #{faceId} AND
            id_in_face_1 = #{idInFace}
        LIMIT 1)
        UNION ALL
        (SELECT edge_id FROM fold_edge
        WHERE
            face_2_id = #{faceId} AND
            id_in_face_2 = #{idInFace}
        LIMIT 1)
        UNION ALL
        (SELECT edge_id FROM side_edge
        WHERE
            face_id = #{faceId} AND
            id_in_face = #{idInFace}
        LIMIT 1)
        LIMIT 1;
    </select>

    <!--
        Inserts a new edge into the database.

        - Uses conditional checks to include optional fields dynamically.
        - Stores metadata such as creation and update timestamps.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.Edge">
        INSERT INTO edge (
        step_id,
        edge_type_id
        <if test="edge.deletedStepId != null">, deleted_step_id</if>
        <if test="edge.createdBy != null">, created_by</if>
        <if test="edge.updatedBy != null">, updated_by</if>
        <if test="edge.createdAt != null">, created_at</if>
        <if test="edge.updatedAt != null">, updated_at</if>
        ) VALUES (
        #{edge.stepId},
        #{edge.edgeTypeId}
        <if test="edge.deletedStepId != null">, #{edge.deletedStepId}</if>
        <if test="edge.createdBy != null">, #{edge.createdBy}</if>
        <if test="edge.updatedBy != null">, #{edge.updatedBy}</if>
        <if test="edge.createdAt != null">, #{edge.createdAt}</if>
        <if test="edge.updatedAt != null">, #{edge.updatedAt}</if>
        )
    </insert>
</mapper>