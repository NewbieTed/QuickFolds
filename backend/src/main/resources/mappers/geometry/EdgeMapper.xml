<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to edges in an origami model.

    Purpose:
    - This mapper provides SQL operations for managing edges, including retrieval and insertion.
    - It supports querying the most recent edge for a step and finding edges within specific faces.

    Key SQL Operations:
    - `getMostRecentId`: Retrieves the most recently inserted edge for a step.
    - `getIdByIdInFace`: Finds an edge based on its position within a face.
    - `addByObj`: Inserts a new edge into the database with optional metadata.

    Dependencies:
    - `Edge`: The Java entity representing an edge in the origami model.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.EdgeMapper">

    <!--
        Retrieves the database ID of the most recently inserted edge for a given step.

        Purpose:
        - Fetches the latest edge inserted for a specific folding step.
        - Used to track the most recent structural changes during folding.

        Parameters:
        - `stepId`: The ID of the step for which the most recent edge is retrieved.

        Result:
        - Returns the ID of the most recently inserted edge, or null if none exist.
    -->
    <select id="getMostRecentId" resultType="java.lang.Long">
        SELECT id
        FROM edge
        WHERE step_id = #{stepId}
        ORDER BY id DESC
        LIMIT 1
    </select>


    <select id="getIdsByFaceIds" resultType="java.lang.Long">
        SELECT id
        FROM edge
        WHERE face_id IN (
        <foreach collection="faceIds" item="faceId" separator=",">
            #{faceId}
        </foreach>
        )
    </select>

    <!--
        Retrieves the database ID of an edge using its position within a face.

        Purpose:
        - Finds an edge based on its logical position (`id_in_face`) within a specific face.
        - Supports both side and fold edges using UNION to combine results.

        Parameters:
        - `faceId`: The ID of the origami face containing the edge.
        - `idInFace`: The unique identifier of the edge within the face.

        Result:
        - Returns the edge ID if found, or null if no matching edge exists.
    -->
    <select id="getIdByIdInFace" resultType="java.lang.Long">
        (SELECT edge_id
        FROM side_edge
        WHERE face_id = #{faceId}
        AND id_in_face = #{idInFace}
        LIMIT 1)
        UNION ALL
        (SELECT edge_id
        FROM fold_edge
        WHERE face_1_id = #{faceId}
        AND id_in_face_1 = #{idInFace}
        LIMIT 1)
        UNION ALL
        (SELECT edge_id
        FROM fold_edge
        WHERE face_2_id = #{faceId}
        AND id_in_face_2 = #{idInFace}
        LIMIT 1)
        LIMIT 1;
    </select>

    <!--
        Inserts a new edge into the database.

        Purpose:
        - Adds a new edge record associated with a specific folding step.
        - Supports conditional inclusion of optional fields like timestamps and user metadata.

        Parameters:
        - `edge`: The Java object representing the edge to be inserted.

        Fields Inserted:
        - Required: `step_id`, `edge_type_id`
        - Optional: `deleted_step_id`, `created_by`, `updated_by`, `created_at`, `updated_at`

        Result:
        - Inserts a new edge record and returns the generated primary key.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.Edge">
        INSERT INTO edge (
        step_id,
        edge_type_id
        <if test="edge.deletedStepId != null">, deleted_step_id</if>
        <if test="edge.createdBy != null">, created_by</if>
        <if test="edge.updatedBy != null">, updated_by</if>
        <if test="edge.createdAt != null">, created_at</if>
        <if test="edge.updatedAt != null">, updated_at</if>
        )
        VALUES (
        #{edge.stepId},
        #{edge.edgeTypeId}
        <if test="edge.deletedStepId != null">, #{edge.deletedStepId}</if>
        <if test="edge.createdBy != null">, #{edge.createdBy}</if>
        <if test="edge.updatedBy != null">, #{edge.updatedBy}</if>
        <if test="edge.createdAt != null">, #{edge.createdAt}</if>
        <if test="edge.updatedAt != null">, #{edge.updatedAt}</if>
        );
    </insert>


    <update id="deleteByIds">
        UPDATE edge
        SET deleted_step_id = #{deletedStepId}
        WHERE deleted_step_id IS NULL
        AND id IN (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        );
    </update>

    <update id="deleteByFaceIds">
        UPDATE side_edge
        SET deleted_step_id = #{deletedStepId}
        WHERE deleted_step_id IS NULL
        AND face_id IN (
        <foreach collection="faceIds" item="faceId" separator=",">
            #{faceId}
        </foreach>
        );
    </update>

</mapper>