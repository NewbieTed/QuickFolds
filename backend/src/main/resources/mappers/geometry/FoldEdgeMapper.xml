<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to fold edges in an origami model.

    Purpose:
    - This mapper provides SQL operations for managing fold edges, including insertion.
    - Ensures fold edges are correctly linked to origami faces and edge identifiers.

    Key SQL Operations:
    - `addByObj`: Inserts a new fold edge into the database with optional metadata fields.

    Dependencies:
    - `FoldEdge`: The Java entity representing a fold edge in the origami model.
    - `fold_edge` table: Stores information about fold edges, including associated faces, angles, and metadata.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.FoldEdgeMapper">

    <resultMap id="FoldEdgeMap" type="com.quickfolds.backend.geometry.model.database.FoldEdge">
        <result property="edgeId" column="edge_id"/>
        <result property="face1Id" column="face_1_id"/>
        <result property="face2Id" column="face_2_id"/>
        <result property="angle" column="angle"/>
        <result property="idInFace1" column="id_in_face_1"/>
        <result property="idInFace2" column="id_in_face_2"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedBy" column="updated_by"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>


    <select id="getIdByFaceIdPair">
        SELECT id from fold_edge
        WHERE face_1_id = #{face1Id}
        AND face_2_id = #{face2Id}
        ORDER BY ID DESC
        LIMIT 1;
    </select>

    <select id="getObjByFaceIdPair" resultMap="FoldEdgeMap">
        SELECT
        edge_id, face_1_id, face_2_id, angle,
        id_in_face_1, id_in_face_2,
        created_by, updated_by, created_at, updated_at
        from fold_edge
        WHERE face_1_id = #{face1Id}
        AND face_2_id = #{face2Id}
    </select>

    <!--
        Inserts a new fold edge into the database.

        Purpose:
        - Adds a fold edge representing the connection between two faces in the origami structure.
        - Dynamically includes optional metadata fields (`created_by`, `updated_by`, `created_at`, `updated_at`)
          using `<if test="...">` to conditionally add fields only when they are non-null.

        Parameters:
        - `foldEdge`: The Java object representing the fold edge to insert.

        Fields Inserted:
        - Required: `edge_id`, `face_1_id`, `face_2_id`, `angle`, `id_in_face_1`, `id_in_face_2`
        - Optional: `created_by`, `updated_by`, `created_at`, `updated_at`

        Result:
        - Inserts a new fold edge record and returns the generated primary key.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.FoldEdge">
        INSERT INTO fold_edge (
        edge_id,
        face_1_id,
        face_2_id,
        angle,
        id_in_face_1,
        id_in_face_2
        <if test="foldEdge.createdBy != null">, created_by</if>
        <if test="foldEdge.updatedBy != null">, updated_by</if>
        <if test="foldEdge.createdAt != null">, created_at</if>
        <if test="foldEdge.updatedAt != null">, updated_at</if>
        ) VALUES (
        #{foldEdge.edgeId},
        #{foldEdge.face1Id},
        #{foldEdge.face2Id},
        #{foldEdge.angle},
        #{foldEdge.idInFace1},
        #{foldEdge.idInFace2}
        <if test="foldEdge.createdBy != null">, #{foldEdge.createdBy}</if>
        <if test="foldEdge.updatedBy != null">, #{foldEdge.updatedBy}</if>
        <if test="foldEdge.createdAt != null">, #{foldEdge.createdAt}</if>
        <if test="foldEdge.updatedAt != null">, #{foldEdge.updatedAt}</if>
        );
    </insert>


    <update id="deleteByFaceId">
        UPDATE edge e
        SET deleted_step_id = #{deletedStepId}
        FROM fold_edge fe
        WHERE
        fe.edge_id = e.id
        AND e.deleted_step_id IS NULL
        AND (
        fe.face_1_id = #{faceId}
        OR fe.face_2_id = #{faceId}
        );
    </update>

    <update id="deleteByFaceIds">
        UPDATE edge e
        SET deleted_step_id = #{deletedStepId}
        FROM fold_edge fe
        WHERE
        fe.edge_id = e.id
        AND e.deleted_step_id IS NULL
        AND (
        fe.face_1_id IN (
        <foreach collection="faceIds" item="faceId" separator=",">
            #{faceId}
        </foreach>
        )
        OR fe.face_2_id IN (
        <foreach collection="faceIds" item="faceId" separator=",">
            #{faceId}
        </foreach>
        )
        );
    </update>

    <!--
      Retrieves the id in a specified face of a specified edge.

      Purpose:
      - Retrieve the ID in face of a fold edge.

      Parameters:
      - `edgeId`: The ID of the edge being queried.
      - `faceId`: the ID of the face the edge is in.

      Result:
      - The ID (`Integer`) of the edge in the face its on.
  -->
    <select id="getEdgeIdInFace" resultType="java.lang.Integer">
        SELECT
            CASE
                WHEN face_1_id = #{faceId} THEN id_in_face_1
                WHEN face_2_id = #{faceId} THEN id_in_face_2
                ELSE NULL
                END as id_in_face
        FROM fold_edge
        WHERE edge_id = #{edgeId}
    </select>

</mapper>