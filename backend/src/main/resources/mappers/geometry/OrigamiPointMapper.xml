<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    MyBatis XML Mapper for handling database operations related to origami points.

    - Defines SQL mappings for retrieving, inserting, and soft deleting points within an origami face.

    SQL Operations:
    - `getIdByIdInFace`: Retrieves a single origami point ID within a face.
    - `getIdsByIdsInFace`: Retrieves multiple origami point IDs within a face.
    - `addByObj`: Inserts a new origami point into the database.
    - `deleteByIdsInFace`: Marks multiple origami points as deleted.

    Dependencies:
    - `OrigamiPoint`: The Java entity representing an origami point.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.OrigamiPointMapper">
    <!--
        Retrieves the database ID of a point using its position within a specific face.

        - Ensures that the queried point belongs to the specified face.
        - Uses `LIMIT 1` to return only a single result.
    -->
    <select id="getIdByIdInFace">
        SELECT id FROM origami_point
        WHERE
        face_id = #{faceId}
        AND
        id_in_face = #{idInFace}
        LIMIT 1
    </select>

    <!--
        Retrieves multiple database IDs of points within a face.

        - Uses `IN` to fetch all matching points efficiently.
        - Utilizes `<foreach>` to dynamically build the list of point IDs.
    -->
    <select id="getIdsByIdsInFace" resultType="java.lang.Long">
        SELECT id FROM origami_point
        WHERE face_id = #{faceId}
        AND id_in_face IN (
        <foreach collection="idsInFace" item="idInFace" separator=",">
            #{idInFace}
        </foreach>
        )
    </select>



    <select id="getIdsOfPointTypeByIds" resultType="java.lang.Long">
        SELECT id FROM origami_point
        WHERE point_type_id = #{pointTypeId}
        AND id IN (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
    </select>

    <!--
    Inserts a new origami point into the database.

    - Dynamically includes optional metadata fields (`deleted_step_id`, `created_by`, `updated_by`, `created_at`, `updated_at`).
    - Uses `<if test="...">` to conditionally add fields only when they are non-null.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.OrigamiPoint">
        INSERT INTO origami_point (
            step_id,
            face_id,
            point_type_id,
            x_pos,
            y_pos,
            id_in_face
            <if test="origamiPoint.deletedStepId != null">, deleted_step_id</if>
            <if test="origamiPoint.createdBy != null">, created_by</if>
            <if test="origamiPoint.updatedBy != null">, updated_by</if>
            <if test="origamiPoint.createdAt != null">, created_at</if>
            <if test="origamiPoint.updatedAt != null">, updated_at</if>
        ) VALUES (
            #{origamiPoint.stepId},
            #{origamiPoint.faceId},
            #{origamiPoint.pointTypeId},
            #{origamiPoint.xPos},
            #{origamiPoint.yPos},
            #{origamiPoint.idInFace}
            <if test="origamiPoint.deletedStepId != null">, #{origamiPoint.deletedStepId}</if>
            <if test="origamiPoint.createdBy != null">, #{origamiPoint.createdBy}</if>
            <if test="origamiPoint.updatedBy != null">, #{origamiPoint.updatedBy}</if>
            <if test="origamiPoint.createdAt != null">, #{origamiPoint.createdAt}</if>
            <if test="origamiPoint.updatedAt != null">, #{origamiPoint.updatedAt}</if>
        )
    </insert>

    <!--
        Marks multiple origami points as deleted by setting `deleted_step_id`.

        - Updates points that have not already been deleted (`deleted_step_id IS NULL`).
        - Uses `<foreach>` to handle batch deletions.
    -->
    <update id="deleteByIdsInFace">
        UPDATE origami_point
        SET deleted_step_id = #{deletedStepId}
        WHERE face_id = #{faceId}
        AND deleted_step_id IS NULL
        AND id_in_face IN (
        <foreach collection="idsInFace" item="idInFace" separator=",">
            #{idInFace}
        </foreach>
        )
    </update>

</mapper>