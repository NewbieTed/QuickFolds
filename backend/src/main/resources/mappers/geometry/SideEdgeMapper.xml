<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MyBatis XML Mapper for handling database operations related to side edges in an origami model.

    Purpose:
    - This mapper provides SQL operations for managing side edges, including insertion.
    - Ensures side edges are correctly linked to vertices and faces within the origami structure.

    Key SQL Operations:
    - `addByObj`: Inserts a new side edge into the database with optional metadata fields.

    Dependencies:
    - `SideEdge`: The Java entity representing a side edge in the origami model.
    - `side_edge` table: Stores side edges, including associated vertices, faces, and metadata.
-->
<mapper namespace="com.quickfolds.backend.geometry.mapper.SideEdgeMapper">

    <!--
        Inserts a new side edge into the database.

        Purpose:
        - Adds a side edge representing the connection between two vertices in an origami face.
        - Dynamically includes optional metadata fields (`created_by`, `updated_by`, `created_at`, `updated_at`)
          using `<if test="...">` to conditionally add fields only when they are non-null.

        Parameters:
        - `sideEdge`: The Java object representing the side edge to insert.

        Fields Inserted:
        - Required: `edge_id`, `vertex_1_id`, `vertex_2_id`, `face_id`, `id_in_face`
        - Optional: `created_by`, `updated_by`, `created_at`, `updated_at`

        Result:
        - Inserts a new side edge record and returns the generated primary key.
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.geometry.model.database.SideEdge">
        INSERT INTO side_edge (
        edge_id,
        vertex_1_id,
        vertex_2_id,
        face_id,
        id_in_face
        <if test="sideEdge.createdBy != null">, created_by</if>
        <if test="sideEdge.updatedBy != null">, updated_by</if>
        <if test="sideEdge.createdAt != null">, created_at</if>
        <if test="sideEdge.updatedAt != null">, updated_at</if>
        ) VALUES (
        #{sideEdge.edgeId},
        #{sideEdge.vertex1Id},
        #{sideEdge.vertex2Id},
        #{sideEdge.faceId},
        #{sideEdge.idInFace}
        <if test="sideEdge.createdBy != null">, #{sideEdge.createdBy}</if>
        <if test="sideEdge.updatedBy != null">, #{sideEdge.updatedBy}</if>
        <if test="sideEdge.createdAt != null">, #{sideEdge.createdAt}</if>
        <if test="sideEdge.updatedAt != null">, #{sideEdge.updatedAt}</if>
        )
    </insert>


    <update id="deleteByFaceIds">
        UPDATE edge e
        SET deleted_step_id = #{deletedStepId}
        FROM side_edge se
        WHERE
        se.edge_id = e.id
        AND e.deleted_step_id IS NULL
        AND se.face_id IN (
        <foreach collection="faceIds" item="faceId" separator=",">
            #{faceId}
        </foreach>
        );
    </update>

    <!--
       Retrieves the id in face of a specified edge.

       Purpose:
       - Retrieve the ID in face of a side edge.

       Parameters:
       - `edgeId`: The ID of the edge being queried.

       Result:
       - The ID (`Integer`) of the edge in the face its on.
   -->
    <select id="getEdgeIdInFace" resultType="java.lang.Integer">
        SELECT id_in_face
        FROM side_edge
        WHERE edge_id = #{edgeId}
    </select>

    <!--
        Get side edges for a face

        Purpose:
        - Retrieve all side edges associated with a specific face in the origami model.

        Parameters:
        - `faceId`: The ID of the face to retrieve side edges for.

        Result:
        - A list of `EdgeResponse` objects representing the side edges in the specified face.
    -->
    <select id="getSideEdgesByFaceId" resultType="com.quickfolds.backend.geometry.model.dto.response.EdgeResponse">
        SELECT
            se.id_in_face as idInFace,
            'side' as edgeType,
            op1.id_in_face as vertex1IdInFace,
            op2.id_in_face as vertex2IdInFace,
            null as otherFaceIdInOrigami,
            null as idInOtherFace,
            null as angle
        FROM side_edge se
                 INNER JOIN edge e ON se.edge_id = e.id
                 INNER JOIN origami_point op1 ON se.vertex_1_id = op1.id
                 INNER JOIN origami_point op2 ON se.vertex_2_id = op2.id
        WHERE se.face_id = #{faceId}
          AND e.deleted_step_id IS NULL
        ORDER BY se.id_in_face
    </select>

</mapper>