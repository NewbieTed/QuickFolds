<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    MyBatis XML Mapper for handling database operations related to origami models.

    - Defines SQL mappings for retrieving and inserting origami models.

    SQL Operations:
    - `getPublicOrigamis`: Retrieves public origami models with author details.
    - `getPublicOrigamiIds`: Retrieves only the IDs of public origami models.
    - `getMostRecentId`: Retrieves the most recently created origami model by a user.
    - `addByObj`: Inserts a new origami model into the database.

    Dependencies:
    - `Origami`: The Java entity representing an origami model.
    - `OrigamiResponse`: The DTO used for returning public origami details.
-->
<mapper namespace="com.quickfolds.backend.origami.mapper.OrigamiMapper">
    <!--
        Maps database columns to the `OrigamiResponse` DTO fields.
        - Ensures MyBatis correctly maps query results to Java objects.
    -->
    <resultMap id="OrigamiResponseMap" type="com.quickfolds.backend.origami.model.dto.response.OrigamiResponse">
        <id property="origamiId" column="origami_id"/>
        <result property="origamiName" column="origami_name"/>
        <result property="author" column="author"/>
        <result property="ratings" column="ratings"/>
    </resultMap>

    <!--
        Retrieves a list of public origami models with author details.

        - Joins the `users` table to fetch the author's username.
        - Returns data mapped to `OrigamiResponseMap`.
    -->
    <select id="getPublicOrigamis" resultMap="OrigamiResponseMap">
        SELECT o.id AS origami_id, o.origami_name, u.username AS author, o.ratings
        FROM origami o
        INNER JOIN users u ON o.user_id = u.id
        WHERE o.is_public = true
    </select>

    <!--
        Retrieves only the IDs of public origami models.

        - Optimized for scenarios where only IDs are needed, reducing data transfer.
    -->
    <select id="getPublicOrigamiIds" resultType="java.lang.Long">
        SELECT id FROM origami
        WHERE
        is_public = true
    </select>

    <!--
        Retrieves the database ID of the most recently created origami model by a specific user.

        - Sorts origami by `id` in descending order.
        - Uses `LIMIT 1` to fetch only the most recent entry.
    -->
    <select id="getMostRecentId" resultType="java.lang.Long">
        SELECT id FROM origami
        WHERE
        user_id = #{userId}
        ORDER BY id DESC
        LIMIT 1
    </select>

    <!--
    Inserts a new origami model into the database.

    - Uses `<if test="...">` to conditionally insert optional fields (`created_by`, `updated_by`, `created_at`, `updated_at`).
    -->
    <insert id="addByObj" parameterType="com.quickfolds.backend.origami.model.database.Origami">
        INSERT INTO origami (
            user_id,
            origami_name,
            is_public,
            ratings
            <if test="origami.createdBy != null">, created_by</if>
            <if test="origami.updatedBy != null">, updated_by</if>
            <if test="origami.createdAt != null">, created_at</if>
            <if test="origami.updatedAt != null">, updated_at</if>
        ) VALUES (
            #{origami.userId},
            #{origami.origamiName},
            #{origami.isPublic},
            #{origami.ratings}
            <if test="origami.createdBy != null">, #{origami.createdBy}</if>
            <if test="origami.updatedBy != null">, #{origami.updatedBy}</if>
            <if test="origami.createdAt != null">, #{origami.createdAt}</if>
            <if test="origami.updatedAt != null">, #{origami.updatedAt}</if>
        )
    </insert>

</mapper>